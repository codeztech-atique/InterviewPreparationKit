

React Hooks are functions that enable functional components to use state, lifecycle methods, and other React features without 
needing to write a class. They were introduced in React 16.8 to address the limitations of functional components and to 
make it easier to manage stateful logic and side effects.

Hooks can be used to manage state, handle side effects, and reuse stateful logic across components.

1. useState: Allows functional components to manage state.

import React, { useState } from 'react';

function ExampleComponent() {
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
}

2. useEffect: Enables performing side effects in functional components, such as data fetching, subscriptions, or manually changing the DOM.

import React, { useState, useEffect } from 'react';

function ExampleComponent() {
  const [data, setData] = useState(null);

  useEffect(() => {
    // Fetch data when the component mounts
    fetchData();
  }, []); // Empty dependency array ensures the effect runs only once

  const fetchData = async () => {
    const response = await fetch('https://api.example.com/data');
    const result = await response.json();
    setData(result);
  };

  return (
    <div>
      <p>Data: {data}</p>
    </div>
  );
}


3. UseContext - Provides access to the value of a React context within a functional component.

Example:

import React, { useContext } from 'react';
import MyContext from './MyContext';

function ExampleComponent() {
  const contextValue = useContext(MyContext);

  return (
    <div>
      <p>Context Value: {contextValue}</p>
    </div>
  );
}


4. useReducer: Manages more complex state logic using a reducer function.

import React, { useReducer } from 'react';

const initialState = { count: 0 };

function reducer(state, action) {
  switch (action.type) {
    case 'increment':
      return { count: state.count + 1 };
    case 'decrement':
      return { count: state.count - 1 };
    default:
      return state;
  }
}

function ExampleComponent() {
  const [state, dispatch] = useReducer(reducer, initialState);

  return (
    <div>
      <p>Count: {state.count}</p>
      <button onClick={() => dispatch({ type: 'increment' })}>Increment</button>
      <button onClick={() => dispatch({ type: 'decrement' })}>Decrement</button>
    </div>
  );
}

5. 





